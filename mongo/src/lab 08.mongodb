use(scientific_journal);

// Insert data into languages collection
db.languages.insertMany([
  { _id: 1, name: 'Ukrainian' },
  { _id: 2, name: 'English' },
  { _id: 3, name: 'Spanish' },
  { _id: 4, name: 'German' },
  { _id: 5, name: 'French' },
]);

// Insert data into sections collection
db.sections.insertMany([
  { _id: 1, name: 'Physics' },
  { _id: 2, name: 'Chemistry' },
  { _id: 3, name: 'Biology' },
  { _id: 4, name: 'Mathematics' },
  { _id: 5, name: 'Computer Science' },
]);

// Insert data into subsections collection
db.subsections.insertMany([
  { _id: 1, name: 'Thermodynamics', section_id: 1 },
  { _id: 2, name: 'Organic Chemistry', section_id: 2 },
  { _id: 3, name: 'Genetics', section_id: 3 },
  { _id: 4, name: 'Calculus', section_id: 4 },
  { _id: 5, name: 'Machine Learning', section_id: 5 },
]);

// Insert data into topics collection
db.topics.insertMany([
  {
    _id: 1,
    english_name: 'Heat Transfer',
    ukrainian_name: 'Передача тепла',
    spanish_name: 'Transferencia de calor',
    subsection_id: 1,
  },
  {
    _id: 2,
    english_name: 'Hydrocarbons',
    ukrainian_name: 'Вуглеводні',
    spanish_name: 'Hidrocarburos',
    subsection_id: 2,
  },
  {
    _id: 3,
    english_name: 'DNA Structure',
    ukrainian_name: 'Структура ДНК',
    spanish_name: 'Estructura del ADN',
    subsection_id: 3,
  },
  {
    _id: 4,
    english_name: 'Integration',
    ukrainian_name: 'Інтеграція',
    spanish_name: 'Integración',
    subsection_id: 4,
  },
  {
    _id: 5,
    english_name: 'Supervised Learning',
    ukrainian_name: 'Навчання з вчителем',
    spanish_name: 'Aprendizaje supervisado',
    subsection_id: 5,
  },
]);

// Insert data into articles collection
db.articles.insertMany([
  {
    _id: 1,
    file_address: 'path/to/article01.pdf',
    publish_date: '2018-03-01',
    language_id: 2,
    topic_id: 1,
  },
  {
    _id: 2,
    file_address: 'path/to/article02.pdf',
    publish_date: '2017-03-02',
    language_id: 1,
    topic_id: 3,
  },
  {
    _id: 3,
    file_address: 'path/to/article03.pdf',
    publish_date: '2019-03-03',
    language_id: 3,
    topic_id: 5,
  },
  {
    _id: 4,
    file_address: 'path/to/article04.pdf',
    publish_date: '2024-03-04',
    language_id: 2,
    topic_id: 2,
  },
  {
    _id: 5,
    file_address: 'path/to/article05.pdf',
    publish_date: '2024-03-05',
    language_id: 1,
    topic_id: 4,
  },
  {
    _id: 6,
    file_address: 'path/to/article06.pdf',
    publish_date: '2024-03-06',
    language_id: 2,
    topic_id: 1,
  },
  {
    _id: 7,
    file_address: 'path/to/article07.pdf',
    publish_date: '2024-03-07',
    language_id: 1,
    topic_id: 3,
  },
  {
    _id: 8,
    file_address: 'path/to/article08.pdf',
    publish_date: '2024-03-08',
    language_id: 3,
    topic_id: 5,
  },
  {
    _id: 9,
    file_address: 'path/to/article09.pdf',
    publish_date: '2024-03-09',
    language_id: 2,
    topic_id: 2,
  },
  {
    _id: 10,
    file_address: 'path/to/article10.pdf',
    publish_date: '2024-03-10',
    language_id: 1,
    topic_id: 4,
  },
]);

// Insert data into annotations collection
db.annotations.insertMany([
  {
    _id: 1,
    english: 'This is the annotation for article 1.',
    ukrainian: 'Це анотація до статті 1.',
    spanish: 'Esta es la anotación para el artículo 1.',
    article_id: 1,
  },
  {
    _id: 2,
    english: 'Article 2 is about DNA structure.',
    ukrainian: 'Стаття 2 присвячена структурі ДНК.',
    spanish: 'El artículo 2 trata sobre la estructura del ADN.',
    article_id: 2,
  },
  {
    _id: 3,
    english: 'Machine Learning algorithms are discussed in article 3.',
    ukrainian: 'Алгоритми машинного навчання обговорюються в статті 3.',
    spanish:
      'Se discuten los algoritmos de aprendizaje automático en el artículo 3.',
    article_id: 3,
  },
  {
    _id: 4,
    english: 'Organic chemistry concepts are explored in article 4.',
    ukrainian: 'У статті 4 досліджуються концепції органічної хімії.',
    spanish: 'Se exploran conceptos de química orgánica en el artículo 4.',
    article_id: 4,
  },
  {
    _id: 5,
    english: 'Integration techniques are explained in article 5.',
    ukrainian: 'Техніки інтеграції пояснюються в статті 5.',
    spanish: 'Se explican las técnicas de integración en el artículo 5.',
    article_id: 5,
  },
]);

// Insert data into authors collection
db.authors.insertMany([
  {
    _id: 1,
    first_name: 'John',
    last_name: 'Doe',
    email: 'john.doe@example.com',
  },
  {
    _id: 2,
    first_name: 'Alice',
    last_name: 'Smith',
    email: 'alice.smith@example.com',
  },
  {
    _id: 3,
    first_name: 'Bob',
    last_name: 'Johnson',
    email: 'bob.johnson@example.com',
  },
  {
    _id: 4,
    first_name: 'Elena',
    last_name: 'Martinez',
    email: 'elena.martinez@example.com',
  },
  {
    _id: 5,
    first_name: 'Peter',
    last_name: 'Wong',
    email: 'peter.wong@example.com',
  },
]);

// Insert data into reviewers collection
db.reviewers.insertMany([
  { _id: 1, first_name: 'David', last_name: 'Miller' },
  { _id: 2, first_name: 'Sandra', last_name: 'Clark' },
  { _id: 3, first_name: 'Michael', last_name: 'Lee' },
  { _id: 4, first_name: 'Karen', last_name: 'Taylor' },
  { _id: 5, first_name: 'Richard', last_name: 'Brown' },
]);

// Insert data into reviews collection
db.reviews.insertMany([
  {
    _id: 1,
    novelty: 4,
    relevance: 5,
    literature_completeness: 3,
    presentation_completeness: 4,
    text_quality: 4,
    reviewer_id: 1,
    article_id: 1,
  },
  {
    _id: 2,
    novelty: 5,
    relevance: 4,
    literature_completeness: 4,
    presentation_completeness: 5,
    text_quality: 5,
    reviewer_id: 2,
    article_id: 2,
  },
  {
    _id: 3,
    novelty: 3,
    relevance: 5,
    literature_completeness: 4,
    presentation_completeness: 3,
    text_quality: 4,
    reviewer_id: 3,
    article_id: 3,
  },
  {
    _id: 4,
    novelty: 4,
    relevance: 4,
    literature_completeness: 3,
    presentation_completeness: 5,
    text_quality: 5,
    reviewer_id: 4,
    article_id: 4,
  },
  {
    _id: 5,
    novelty: 5,
    relevance: 3,
    literature_completeness: 5,
    presentation_completeness: 4,
    text_quality: 4,
    reviewer_id: 5,
    article_id: 5,
  },
  {
    _id: 6,
    novelty: 3,
    relevance: 4,
    literature_completeness: 4,
    presentation_completeness: 3,
    text_quality: 3,
    reviewer_id: 1,
    article_id: 2,
  },
  {
    _id: 7,
    novelty: 4,
    relevance: 5,
    literature_completeness: 4,
    presentation_completeness: 5,
    text_quality: 4,
    reviewer_id: 2,
    article_id: 3,
  },
  {
    _id: 8,
    novelty: 5,
    relevance: 4,
    literature_completeness: 3,
    presentation_completeness: 5,
    text_quality: 5,
    reviewer_id: 3,
    article_id: 4,
  },
  {
    _id: 9,
    novelty: 3,
    relevance: 3,
    literature_completeness: 4,
    presentation_completeness: 3,
    text_quality: 4,
    reviewer_id: 4,
    article_id: 5,
  },
  {
    _id: 10,
    novelty: 4,
    relevance: 5,
    literature_completeness: 5,
    presentation_completeness: 4,
    text_quality: 4,
    reviewer_id: 5,
    article_id: 1,
  },
]);

// Insert data into remarks_to_authors collection
db.remarks_to_authors.insertMany([
  {
    _id: 1,
    remark: 'The paper needs more examples in the discussion section.',
    review_id: 1,
  },
  {
    _id: 2,
    remark: 'Excellent work on explaining DNA structure.',
    review_id: 2,
  },
  {
    _id: 3,
    remark:
      'Clarify the implementation details of the machine learning algorithms.',
    review_id: 3,
  },
  {
    _id: 4,
    remark: 'Well-written article on organic chemistry concepts.',
    review_id: 4,
  },
  {
    _id: 5,
    remark: 'Great explanation of integration techniques.',
    review_id: 5,
  },
  {
    _id: 6,
    remark:
      'Expand the discussion on the application of DNA structure in biotechnology.',
    review_id: 6,
  },
  {
    _id: 7,
    remark:
      'Well-done on explaining machine learning algorithms; provide more examples.',
    review_id: 7,
  },
  {
    _id: 8,
    remark:
      'Incorporate recent research findings in the field of organic chemistry.',
    review_id: 8,
  },
  {
    _id: 9,
    remark:
      'Clarify the mathematical derivations in the integration techniques section.',
    review_id: 9,
  },
  {
    _id: 10,
    remark: 'Address the limitations of the presented heat transfer model.',
    review_id: 10,
  },
]);

// Insert data into reports_to_editors collection
db.reports_to_editors.insertMany([
  {
    _id: 1,
    report: 'Recommend minor revisions before acceptance.',
    review_id: 1,
  },
  {
    _id: 2,
    report: 'Accept as is; well-written and informative.',
    review_id: 2,
  },
  {
    _id: 3,
    report: 'Major revisions required for clarity and completeness.',
    review_id: 3,
  },
  { _id: 4, report: 'Ready for publication with minor edits.', review_id: 4 },
  { _id: 5, report: 'Suggest revisions for improved clarity.', review_id: 5 },
  {
    _id: 6,
    report: 'Suggest major revisions for a more comprehensive coverage.',
    review_id: 6,
  },
  {
    _id: 7,
    report:
      'Accept with minor revisions; improve examples in the machine learning section.',
    review_id: 7,
  },
  {
    _id: 8,
    report: 'Ready for publication after addressing the suggested revisions.',
    review_id: 8,
  },
  {
    _id: 9,
    report:
      'Recommend revisions for better clarity in mathematical derivations.',
    review_id: 9,
  },
  {
    _id: 10,
    report: 'Accept as is; minor edits required for a few sections.',
    review_id: 10,
  },
]);

// Insert data into editors collection
db.editors.insertMany([
  {
    _id: 1,
    first_name: 'John',
    last_name: 'Doe',
    phone: '1234567890',
    email: 'john.doe@example.com',
    address: '123 Main St, City, Country',
  },
  {
    _id: 2,
    first_name: 'Jane',
    last_name: 'Smith',
    phone: '9876543210',
    email: 'jane.smith@example.com',
    address: '456 Elm St, Town, Country',
  },
  {
    _id: 3,
    first_name: 'Michael',
    last_name: 'Johnson',
    phone: '5551234567',
    email: 'michael.johnson@example.com',
    address: '789 Oak St, Village, Country',
  },
  {
    _id: 4,
    first_name: 'Emily',
    last_name: 'Brown',
    phone: '9871234560',
    email: 'emily.brown@example.com',
    address: '101 Pine St, Suburb, Country',
  },
  {
    _id: 5,
    first_name: 'David',
    last_name: 'Williams',
    phone: '4445556666',
    email: 'david.williams@example.com',
    address: '202 Maple St, City, Country',
  },
  {
    _id: 6,
    first_name: 'Sarah',
    last_name: 'Jones',
    phone: '3334445555',
    email: 'sarah.jones@example.com',
    address: '303 Cedar St, Town, Country',
  },
  {
    _id: 7,
    first_name: 'Matthew',
    last_name: 'Garcia',
    phone: '2223334444',
    email: 'matthew.garcia@example.com',
    address: '404 Birch St, Village, Country',
  },
  {
    _id: 8,
    first_name: 'Jessica',
    last_name: 'Martinez',
    phone: '1112223333',
    email: 'jessica.martinez@example.com',
    address: '505 Spruce St, Suburb, Country',
  },
  {
    _id: 9,
    first_name: 'Daniel',
    last_name: 'Hernandez',
    phone: '9998887777',
    email: 'daniel.hernandez@example.com',
    address: '606 Oak St, City, Country',
  },
  {
    _id: 10,
    first_name: 'Amanda',
    last_name: 'Lopez',
    phone: '6667778888',
    email: 'amanda.lopez@example.com',
    address: '707 Pine St, Town, Country',
  },
  {
    _id: 11,
    first_name: 'Christopher',
    last_name: 'Gonzalez',
    phone: '4447778888',
    email: 'christopher.gonzalez@example.com',
    address: '808 Elm St, Village, Country',
  },
  {
    _id: 12,
    first_name: 'Ashley',
    last_name: 'Perez',
    phone: '5557778888',
    email: 'ashley.perez@example.com',
    address: '909 Cedar St, Suburb, Country',
  },
  {
    _id: 13,
    first_name: 'Justin',
    last_name: 'Rodriguez',
    phone: '6669998888',
    email: 'justin.rodriguez@example.com',
    address: '111 Maple St, City, Country',
  },
  {
    _id: 14,
    first_name: 'Brittany',
    last_name: 'Sanchez',
    phone: '9991112222',
    email: 'brittany.sanchez@example.com',
    address: '222 Birch St, Town, Country',
  },
  {
    _id: 15,
    first_name: 'Andrew',
    last_name: 'Ramirez',
    phone: '8882223333',
    email: 'andrew.ramirez@example.com',
    address: '333 Spruce St, Village, Country',
  },
]);

// Insert data into keywords collection
db.keywords.insertMany([
  { _id: 1, word: 'Thermodynamics' },
  { _id: 2, word: 'Hydrocarbons' },
  { _id: 3, word: 'DNA Structure' },
  { _id: 4, word: 'Integration' },
  { _id: 5, word: 'Machine Learning' },
]);

// Insert data into article_authors collection
db.article_authors.insertMany([
  { _id: 1, article_id: 1, author_id: 1 },
  { _id: 2, article_id: 2, author_id: 2 },
  { _id: 3, article_id: 3, author_id: 3 },
  { _id: 4, article_id: 4, author_id: 4 },
  { _id: 5, article_id: 5, author_id: 5 },
  { _id: 6, article_id: 6, author_id: 1 },
  { _id: 7, article_id: 7, author_id: 1 },
  { _id: 8, article_id: 8, author_id: 2 },
  { _id: 9, article_id: 9, author_id: 3 },
  { _id: 10, article_id: 10, author_id: 2 },
]);

// Insert data into article_keywords collection
db.article_keywords.insertMany([
  { _id: 1, article_id: 1, keyword_id: 1 },
  { _id: 2, article_id: 2, keyword_id: 3 },
  { _id: 3, article_id: 3, keyword_id: 5 },
  { _id: 4, article_id: 4, keyword_id: 2 },
  { _id: 5, article_id: 5, keyword_id: 4 },
]);

// Insert data into reviewer_topics collection
db.reviewer_topics.insertMany([
  { _id: 1, reviewer_id: 1, topic_id: 1 },
  { _id: 2, reviewer_id: 2, topic_id: 3 },
  { _id: 3, reviewer_id: 3, topic_id: 5 },
  { _id: 4, reviewer_id: 4, topic_id: 2 },
  { _id: 5, reviewer_id: 5, topic_id: 4 },
  { _id: 6, reviewer_id: 5, topic_id: 1 },
  { _id: 7, reviewer_id: 1, topic_id: 3 },
  { _id: 8, reviewer_id: 2, topic_id: 5 },
  { _id: 9, reviewer_id: 3, topic_id: 2 },
  { _id: 10, reviewer_id: 4, topic_id: 4 },
]);

db.subsections.find().forEach((doc) => {
  db.subsections.updateOne(
    { _id: doc._id },
    {
      $set: {
        section_id: {
          $ref: 'sections',
          $id: doc.section_id,
        },
      },
    }
  );
});

db.topics.find().forEach((doc) => {
  db.topics.updateOne(
    { _id: doc._id },
    {
      $set: {
        subsection_id: {
          $ref: 'subsections',
          $id: doc.subsection_id,
        },
      },
    }
  );
});

db.articles.find().forEach((doc) => {
  db.articles.updateOne(
    { _id: doc._id },
    {
      $set: {
        language_id: {
          $ref: 'languages',
          $id: doc.language_id,
        },
        topic_id: {
          $ref: 'topics',
          $id: doc.topic_id,
        },
      },
    }
  );
});

db.annotations.find().forEach((doc) => {
  db.annotations.updateOne(
    { _id: doc._id },
    {
      $set: {
        article_id: {
          $ref: 'articles',
          $id: doc.article_id,
        },
      },
    }
  );
});

db.reviews.find().forEach((doc) => {
  db.reviews.updateOne(
    { _id: doc._id },
    {
      $set: {
        reviewer_id: {
          $ref: 'reviewers',
          $id: doc.reviewer_id,
        },
        article_id: {
          $ref: 'articles',
          $id: doc.article_id,
        },
      },
    }
  );
});

db.remarks_to_authors.find().forEach((doc) => {
  db.remarks_to_authors.updateOne(
    { _id: doc._id },
    {
      $set: {
        review_id: {
          $ref: 'reviews',
          $id: doc.review_id,
        },
      },
    }
  );
});

db.reports_to_editors.find().forEach((doc) => {
  db.reports_to_editors.updateOne(
    { _id: doc._id },
    {
      $set: {
        review_id: {
          $ref: 'reviews',
          $id: doc.review_id,
        },
      },
    }
  );
});

db.article_authors.find().forEach((doc) => {
  db.article_authors.updateOne(
    { _id: doc._id },
    {
      $set: {
        article_id: {
          $ref: 'articles',
          $id: doc.article_id,
        },
        author_id: {
          $ref: 'authors',
          $id: doc.author_id,
        },
      },
    }
  );
});

db.article_keywords.find().forEach((doc) => {
  db.article_keywords.updateOne(
    { _id: doc._id },
    {
      $set: {
        article_id: {
          $ref: 'articles',
          $id: doc.article_id,
        },
        keyword_id: {
          $ref: 'keywords',
          $id: doc.keyword_id,
        },
      },
    }
  );
});

db.reviewer_topics.find().forEach((doc) => {
  db.reviewer_topics.updateOne(
    { _id: doc._id },
    {
      $set: {
        reviewer_id: {
          $ref: 'reviewers',
          $id: doc.reviewer_id,
        },
        topic_id: {
          $ref: 'topics',
          $id: doc.topic_id,
        },
      },
    }
  );
});

/* Queries */

// trunacate tables

db.annotations.deleteMany({});
db.articles.deleteMany({});
db.authors.deleteMany({});
db.keywords.deleteMany({});
db.languages.deleteMany({});
db.reviews.deleteMany({});
db.reviewers.deleteMany({});
db.sections.deleteMany({});
db.subsections.deleteMany({});
db.topics.deleteMany({});

// delete specifiec records

db.annotations.deleteMany({
  $or: [{ spanish: null }, { english: null }, { ukrainian: null }],
});

db.articles.deleteMany({ file_address: null });

db.authors.deleteMany({ email: null });

db.keywords
  .aggregate([
    {
      $group: { _id: '$word', dups: { $addToSet: '$_id' }, count: { $sum: 1 } },
    },
    { $match: { count: { $gt: 1 } } },
  ])
  .forEach((doc) => {
    doc.dups.shift();
    db.keywords.deleteMany({ _id: { $in: doc.dups } });
  });

db.languages.deleteMany({ name: { $in: ['Russian', 'Arabic'] } });

db.reviews.deleteMany({
  $expr: {
    $lt: [
      {
        $divide: [
          {
            $add: [
              '$novelty',
              '$relevance',
              '$literature_completeness',
              '$presentation_completeness',
              '$text_quality',
            ],
          },
          5,
        ],
      },
      3,
    ],
  },
});

db.reviewers.deleteMany({ last_name: /ov$/ });

// Search

db.editors.find({ email: /@example.com$/ });

db.authors.find({ last_name: { $not: /ov$/ } }).sort({ first_name: 1 });

db.articles.aggregate([
  {
    $lookup: {
      from: "languages",
      localField: "language_id.$id",
      foreignField: "_id",
      as: "language"
    }
  },
  {
    $lookup: {
      from: "topics",
      localField: "topic_id.$id",
      foreignField: "_id",
      as: "topic"
    }
  },
  {
    $unwind: "$language"
  },
  {
    $unwind: "$topic"
  }
]).pretty();

db.reviews.find({
  "article_id.$id": {
    $in: db.articles
      .find(
        { "language_id.$id": db.languages.findOne({ name: "Ukrainian" })._id },
        { "_id": 1 }
      )
      .toArray()
      .map((doc) => doc._id),
  },
});

db.reports_to_editors.find({
  review_id: {
    $in: db.reviews
      .aggregate([
        {
          $match: {
            $expr: {
              $gt: [
                {
                  $divide: [
                    {
                      $add: [
                        '$novelty',
                        '$relevance',
                        '$literature_completeness',
                        '$presentation_completeness',
                        '$text_quality',
                      ],
                    },
                    5,
                  ],
                },
                {
                  $avg: {
                    $add: [
                      '$novelty',
                      '$relevance',
                      '$literature_completeness',
                      '$presentation_completeness',
                      '$text_quality',
                    ],
                  },
                },
              ],
            },
          },
        },
        { $project: { _id: 1 } },
      ])
      .toArray()
      .map((doc) => doc._id),
  },
});

// Avg review score greater then avg of avg review scores

db.reports_to_editors.find({
  "review_id.$id": {
    $in: db.reviews
      .aggregate([
        {
          $addFields: {
            total_score: {
              $add: [
                "$novelty",
                "$relevance",
                "$literature_completeness",
                "$presentation_completeness",
                "$text_quality",
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            avg_score: { $avg: "$total_score" },
            reviews: { $push: { _id: "$_id", total_score: "$total_score" } },
          },
        },
        {
          $unwind: "$reviews",
        },
        {
          $project: {
            _id: "$reviews._id",
            is_greater_than_avg: { $gt: ["$reviews.total_score", "$avg_score"] },
          },
        },
        {
          $match: {
            is_greater_than_avg: true,
          },
        },
        {
          $project: {
            _id: 1,
          },
        },
      ])
      .toArray()
      .map((doc) => doc._id),
  },
});


db.articles.find({
  "topic_id.$id": db.topics.findOne({ ukrainian_name: 'Передача тепла' })._id,
});

/* Aggregation */

// Section with the largest number of articles

db.articles
  .aggregate([
    {
      $lookup: {
        from: 'topics',
        localField: 'topic_id.$id',
        foreignField: '_id',
        as: 'topic',
      },
    },
    { $unwind: '$topic' },
    {
      $lookup: {
        from: 'subsections',
        localField: 'topic.subsection_id.$id',
        foreignField: '_id',
        as: 'subsection',
      },
    },
    { $unwind: '$subsection' },
    {
      $lookup: {
        from: 'sections',
        localField: 'subsection.section_id.$id',
        foreignField: '_id',
        as: 'section',
      },
    },
    { $unwind: '$section' },
    {
      $group: {
        _id: '$section._id',
        name: { $first: '$section.name' },
        count: { $sum: 1 },
      },
    },
    { $sort: { count: -1 } },
    { $limit: 1 },
  ])
  .pretty();

// The author who has published the most articles in the last 5 years

db.authors.aggregate([
  {
    $lookup: {
      from: "article_authors",
      localField: "_id",
      foreignField: "author_id.$id",
      as: "article_authors",
    },
  },
  { $unwind: "$article_authors" },
  {
    $lookup: {
      from: "articles",
      localField: "article_authors.article_id.$id",
      foreignField: "_id",
      as: "articles",
    },
  },
  { $unwind: "$articles" },
  {
    $addFields: {
      "publish_date": {
        $toDate: "$articles.publish_date",
      },
    },
  },
  {
    $match: {
      "publish_date": {
        $gte: new Date(new Date().getTime() - 5 * 365 * 24 * 60 * 60 * 1000),
      },
    },
  },
  {
    $group: {
      _id: "$_id",
      first_name: { $first: "$first_name" },
      last_name: { $first: "$last_name" },
      article_count: { $sum: 1 },
    },
  },
  { $sort: { article_count: -1 } },
  { $limit: 1 },
]).pretty();

// The author who has written on the largest number of topics

db.article_authors.aggregate([
  {
    $lookup: {
      from: 'authors',
      localField: 'author_id.$id',
      foreignField: '_id',
      as: 'author',
    },
  },
  { $unwind: '$author' },
  {
    $lookup: {
      from: 'articles',
      localField: 'article_id.$id',
      foreignField: '_id',
      as: 'article',
    },
  },
  { $unwind: '$article' },
  {
    $group: {
      _id: '$author._id',
      first_name: { $first: '$author.first_name' },
      last_name: { $first: '$author.last_name' },
      topic_count: { $addToSet: '$article.topic_id' },
    },
  },
  {
    $project: {
      _id: 1,
      first_name: 1,
      last_name: 1,
      topic_count: { $size: '$topic_count' },
    },
  },
  { $sort: { topic_count: -1 } },
  { $limit: 1 },
]);

